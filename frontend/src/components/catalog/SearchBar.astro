---
// src/components/catalog/SearchBar.astro

// Esta importación solo se usa en el servidor, no es necesaria para la función del cliente
// import { searchGames } from '../../utils/api';

interface Props {
  searchValue?: string;
  placeholder?: string;
  action?: string;
}

const { 
  searchValue = '',
  placeholder = 'Buscar juegos, consolas, categorías...',
  action = '/games'
} = Astro.props;

// Pretendiendo que estamos obteniendo sugerencias populares
// En producción, esto vendría de la API
const popularSearches = [
  'Super Mario',
  'Zelda',
  'Final Fantasy',
  'Pokemon',
  'Sonic',
  'Metroid',
  'Resident Evil'
];
---

<div class="search-container relative w-full max-w-xl mx-auto">
  <form action={action} method="get" role="search" class="relative">
    <div class="relative">
      <!-- Icono de búsqueda -->
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      
      <!-- Input de búsqueda -->
      <input
        type="search"
        id="search-input"
        name="search"
        value={searchValue}
        placeholder={placeholder}
        class="block w-full pl-10 pr-12 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
        autocomplete="off"
      />
      
      <!-- Botón de búsqueda -->
      <div class="absolute inset-y-0 right-0 flex py-1.5 pr-1.5">
        <button
          type="submit"
          class="inline-flex items-center justify-center rounded px-4 py-2 bg-red-600 hover:bg-red-700 text-white transition-colors"
        >
          Buscar
        </button>
      </div>
    </div>
    
    <!-- Autocompletado (inicialmente oculto) -->
    <div id="search-autocomplete" class="absolute mt-1 w-full bg-gray-800 rounded-lg shadow-lg z-20 max-h-96 overflow-y-auto hidden">
      <!-- Resultados de autocompletado se cargarán dinámicamente -->
      <div id="search-results" class="py-2"></div>
      
      <!-- Búsquedas populares -->
      <div class="px-4 py-2 border-t border-gray-700">
        <h3 class="text-sm font-medium text-gray-400 mb-2">Búsquedas populares</h3>
        <div class="flex flex-wrap gap-2">
          {popularSearches.map(term => (
            <button
              type="button"
              class="popular-search text-xs bg-gray-700 hover:bg-gray-600 text-white px-2 py-1 rounded-full"
              data-search={term}
            >
              {term}
            </button>
          ))}
        </div>
      </div>
    </div>
  </form>
</div>

<script>
  // Define la función searchGames en el ámbito global del navegador
  async function searchGames(query) {
    try {
      const API_URL = 'http://backend:8000/api';
      const response = await fetch(`${API_URL}/games/search?q=${encodeURIComponent(query)}`);
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Error searching games:', error);
      return [];
    }
  }

  let searchTimeout;
  
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const autocompleteContainer = document.getElementById('search-autocomplete');
    const searchResultsContainer = document.getElementById('search-results');
    const popularSearchButtons = document.querySelectorAll('.popular-search');
    
    if (!searchInput || !autocompleteContainer || !searchResultsContainer) return;
    
    // Función para cargar resultados de búsqueda
    const loadSearchResults = async (query) => {
      if (!query || query.length < 2) {
        autocompleteContainer.classList.add('hidden');
        return;
      }
      
      try {
        const results = await searchGames(query);
        
        if (results && results.length > 0) {
          searchResultsContainer.innerHTML = results.map(game => `
            <a href="/games/${game.console?.slug || ''}/${game.slug}" class="block px-4 py-2 hover:bg-gray-700">
              <div class="flex items-center">
                <div class="w-10 h-10 bg-gray-700 mr-3 rounded overflow-hidden">
                  <img src="${game.image ? `/storage/${game.image}` : '/placeholder.jpg'}" alt="${game.name}" class="w-full h-full object-cover">
                </div>
                <div>
                  <div class="text-white">${game.name}</div>
                  <div class="text-xs text-gray-400">${game.console?.name || ''}</div>
                </div>
              </div>
            </a>
          `).join('');
          
          // Añadir enlace "Ver todos los resultados"
          searchResultsContainer.innerHTML += `
            <a href="/games?search=${encodeURIComponent(query)}" class="block px-4 py-2 text-center text-red-400 hover:text-red-300">
              Ver todos los resultados para "${query}"
            </a>
          `;
          
          autocompleteContainer.classList.remove('hidden');
        } else {
          searchResultsContainer.innerHTML = `
            <div class="px-4 py-3 text-gray-400">
              No se encontraron resultados para "${query}"
            </div>
          `;
          autocompleteContainer.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error searching games:', error);
        searchResultsContainer.innerHTML = `
          <div class="px-4 py-3 text-gray-400">
            Error al buscar juegos
          </div>
        `;
        autocompleteContainer.classList.remove('hidden');
      }
    };
    
    // El resto de tu código del event listener permanece igual
    // ...
  });
</script>

<style>
  /* Estilo para scrollbar en resultados */
  #search-autocomplete::-webkit-scrollbar {
    width: 6px;
  }
  
  #search-autocomplete::-webkit-scrollbar-track {
    background: #374151;
  }
  
  #search-autocomplete::-webkit-scrollbar-thumb {
    background-color: #6B7280;
    border-radius: 3px;
  }
</style>