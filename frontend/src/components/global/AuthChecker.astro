---
// src/components/global/AuthChecker.astro
// Este componente se debe incluir en MainLayout.astro
---

<script>
  // Script para verificar autenticación en cada carga de página
  document.addEventListener('DOMContentLoaded', async () => {
    console.log("Verificando estado de autenticación...");
    
    const checkAuth = async () => {
      const token = localStorage.getItem('auth_token');
      const expiresAt = localStorage.getItem('auth_expires_at');
      
      console.log("Token encontrado:", !!token);
      console.log("Tiempo de expiración:", expiresAt);
      
      // Si no hay token o ha expirado, limpiar autenticación
      if (!token || (expiresAt && new Date().getTime() > parseInt(expiresAt))) {
        console.log("Token expirado o no encontrado, limpiando autenticación");
        clearAuth();
        return;
      }
      
      try {
        console.log("Verificando token con el backend...");
        const response = await fetch('http://localhost:8000/api/user', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/json'
          }
        });
        
        if (response.ok) {
          const userData = await response.json();
          console.log("Token válido, datos del usuario:", userData);
          
          // Actualizar datos del usuario en localStorage
          localStorage.setItem('auth_user', JSON.stringify(userData));
          
          // Disparar evento para que los componentes se actualicen
          document.dispatchEvent(new CustomEvent('auth-state-changed', {
            detail: { authenticated: true, user: userData }
          }));
        } else {
          console.log("Token inválido, limpiando autenticación");
          clearAuth();
        }
      } catch (error) {
        console.error('Error al verificar autenticación:', error);
        clearAuth();
      }
    };
    
    // Función para limpiar autenticación
    const clearAuth = () => {
      localStorage.removeItem('auth_token');
      localStorage.removeItem('auth_user');
      localStorage.removeItem('auth_expires_at');
      
      document.dispatchEvent(new CustomEvent('auth-state-changed', {
        detail: { authenticated: false }
      }));
    };
    
    // Verificar autenticación al cargar la página
    await checkAuth();
    
    // Función para actualizar datos de usuario en el sidebar
    const updateUserInfo = () => {
      console.log("Actualizando información del usuario en la UI...");
      const userStr = localStorage.getItem('auth_user');
      
      if (!userStr) {
        console.log("No hay usuario autenticado");
        // Resetear UI a estado no autenticado
        const usernameElement = document.getElementById('sidebar-username');
        const emailElement = document.getElementById('sidebar-email');
        
        if (usernameElement) usernameElement.textContent = 'Usuario';
        if (emailElement) emailElement.textContent = 'usuario@example.com';
        
        // Ocultar elementos solo para usuarios autenticados
        document.querySelectorAll('.auth-only').forEach(el => {
          (el as HTMLElement).style.display = 'none';
        });
        
        // Mostrar elementos solo para invitados
        document.querySelectorAll('.guest-only').forEach(el => {
          (el as HTMLElement).style.display = 'block';
        });
        
        return;
      }
      
      try {
        const user = JSON.parse(userStr);
        console.log("Actualizando UI con datos del usuario:", user);
        
        // Actualizar nombre y email en el sidebar
        const usernameElement = document.getElementById('sidebar-username');
        const emailElement = document.getElementById('sidebar-email');
        
        if (usernameElement && user.name) {
          usernameElement.textContent = user.name;
          console.log("Nombre actualizado en sidebar:", user.name);
        }
        
        if (emailElement && user.email) {
          emailElement.textContent = user.email;
          console.log("Email actualizado en sidebar:", user.email);
        }
        
        // Mostrar elementos solo para usuarios autenticados
        document.querySelectorAll('.auth-only').forEach(el => {
          (el as HTMLElement).style.display = 'block';
        });
        
        // Ocultar elementos solo para invitados
        document.querySelectorAll('.guest-only').forEach(el => {
          (el as HTMLElement).style.display = 'none';
        });
        
        // Actualizar botón de autenticación en el header
        updateAuthButton();
        
      } catch (error) {
        console.error('Error al procesar datos de usuario:', error);
      }
    };
    
    // Función para actualizar el botón de autenticación en el header
    const updateAuthButton = () => {
      const authButton = document.getElementById('auth-button');
      if (!authButton) return;
      
      const token = localStorage.getItem('auth_token');
      const userStr = localStorage.getItem('auth_user');
      
      if (token && userStr) {
        // Usuario autenticado
        authButton.textContent = 'Mi cuenta';
        authButton.onclick = () => {
          window.location.href = '/profile';
        };
      } else {
        // Usuario no autenticado
        authButton.textContent = 'Iniciar sesión';
        authButton.onclick = () => {
          document.dispatchEvent(new CustomEvent('open-login-modal'));
        };
      }
    };
    
    // Actualizar UI al cargar la página
    updateUserInfo();
    
    // Escuchar cambios en el estado de autenticación
    document.addEventListener('auth-state-changed', (event) => {
      const customEvent = event as CustomEvent;
      console.log("Estado de autenticación cambió:", customEvent.detail);
      updateUserInfo();
    });
    
    // Escuchar eventos de login exitoso
    document.addEventListener('user-logged-in', (event) => {
      const customEvent = event as CustomEvent;
      console.log("Usuario ha iniciado sesión:", customEvent.detail);
      updateUserInfo();
    });
  });
</script>