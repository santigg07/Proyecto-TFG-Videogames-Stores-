---
// Sidebar.astro

import "../../styles/sidebar.css";
---

<div id="sidebar" class="sidebar">
  <div class="sidebar-header">
    <div class="logo-container">
      <div class="logo">
        <img src="/assets/images/logo-icon.png" alt="Logo" onerror="this.src='/assets/images/fallback-icon.png'; this.onerror=null;">
      </div>
      <div class="brand-name">Retro Time</div>
    </div>
    <button id="sidebar-toggle" class="sidebar-toggle">
      <i class="fas fa-chevron-left"></i>
    </button>
  </div>

  <div class="sidebar-content">
    <nav class="sidebar-nav">
      <a href="/" class="nav-item">
        <i class="fas fa-home"></i>
        <span class="nav-text">Inicio</span>
      </a>
      <a href="/catalog" class="nav-item">
        <i class="fas fa-gamepad"></i>
        <span class="nav-text">Catálogo</span>
      </a>
      <a href="/cart" class="nav-item">
        <i class="fas fa-shopping-cart"></i>
        <span class="nav-text">Carrito</span>
      </a>
    </nav>

    <div class="section-header">
      <span>PLATAFORMAS</span>
      <button class="toggle-section">
        <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    
    <div class="section-content">
      <!-- Nintendo con submenu -->
      <div class="submenu-container">
        <div class="submenu-header nav-item">
          <i class="fas fa-gamepad"></i>
          <span class="nav-text">Nintendo</span>
          <button class="toggle-submenu">
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
        <div class="submenu-content">
          <a href="/games/nintendo-nes" class="nav-item submenu-item">
            <i class="fas fa-circle"></i>
            <span class="nav-text">NES</span>
          </a>
          <a href="/games/super-nintendo" class="nav-item submenu-item">
            <i class="fas fa-circle"></i>
            <span class="nav-text">SNES</span>
          </a>
          <a href="/games/nintendo-64" class="nav-item submenu-item">
            <i class="fas fa-circle"></i>
            <span class="nav-text">Nintendo 64</span>
          </a>
          <a href="/games/nintendo-gamecube" class="nav-item submenu-item">
            <i class="fas fa-circle"></i>
            <span class="nav-text">GameCube</span>
          </a>
        </div>
      </div>
      
      <!-- Otras plataformas -->
      <a href="/games/playstation" class="nav-item">
        <i class="fas fa-gamepad"></i>
        <span class="nav-text">PlayStation</span>
      </a>
      <a href="/games/xbox" class="nav-item">
        <i class="fas fa-gamepad"></i>
        <span class="nav-text">Xbox</span>
      </a>
      <a href="/games/sega-genesis" class="nav-item">
        <i class="fas fa-gamepad"></i>
        <span class="nav-text">Sega</span>
      </a>
    </div>

    <div class="section-header">
      <span>MI CUENTA</span>
      <button class="toggle-section">
        <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="section-content">
      <a href="/profile" class="nav-item">
        <i class="fas fa-user"></i>
        <span class="nav-text">Perfil</span>
      </a>
      <a href="/orders" class="nav-item">
        <i class="fas fa-shopping-bag"></i>
        <span class="nav-text">Mis pedidos</span>
      </a>
      <a href="profile/wishlist" class="nav-item">
        <i class="fas fa-heart"></i>
        <span class="nav-text">Lista de deseos</span>
      </a>
      <a href="/settings" class="nav-item">
        <i class="fas fa-cog"></i>
        <span class="nav-text">Configuración</span>
      </a>
      <!-- Añadir este botón de logout -->
      <a href="#" id="logout-button" class="nav-item">
        <i class="fas fa-sign-out-alt"></i>
        <span class="nav-text">Cerrar sesión</span>
      </a>
    </div>
  </div>

  <div class="sidebar-footer">
    <div class="user-profile">
      <div class="avatar">
        <img src="/assets/images/avatar-placeholder.png" alt="Avatar" onerror="this.src='/assets/images/fallback-avatar.png'; this.onerror=null;">
      </div>
      <div class="user-info">
        <div id="sidebar-username" class="username">Usuario</div>
        <div id="sidebar-email" class="email">usuario@example.com</div>
      </div>
      <button class="settings-button">
        <i class="fas fa-cog"></i>
      </button>
    </div>
  </div>
</div>

<div id="sidebar-overlay" class="sidebar-overlay"></div>



<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebarOverlay = document.getElementById('sidebar-overlay');
    const sectionToggles = document.querySelectorAll('.toggle-section');
    const submenuToggles = document.querySelectorAll('.toggle-submenu');
    const mainContent = document.querySelector('.main-content');
    
    // Toggle sidebar collapse
    if (sidebarToggle) {
      sidebarToggle.addEventListener('click', () => {
        sidebar.classList.toggle('collapsed');
        
        // Update main content margin
        if (mainContent) {
          if (sidebar.classList.contains('collapsed')) {
            mainContent.style.marginLeft = '60px';
          } else {
            mainContent.style.marginLeft = '260px';
          }
        }

        // Rotate the icon
        const icon = sidebarToggle.querySelector('i');
        if (icon) {
          if (sidebar.classList.contains('collapsed')) {
            icon.classList.replace('fa-chevron-left', 'fa-chevron-right');
          } else {
            icon.classList.replace('fa-chevron-right', 'fa-chevron-left');
          }
        }
      });
    }

    // Toggle sections
    sectionToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        const sectionContent = e.currentTarget.parentElement.nextElementSibling;
        
        // Don't toggle if sidebar is collapsed
        if (sidebar.classList.contains('collapsed')) {
          return;
        }
        
        sectionContent.classList.toggle('collapsed');
        
        // Rotate icon
        const icon = e.currentTarget.querySelector('i');
        if (icon) {
          if (sectionContent.classList.contains('collapsed')) {
            icon.classList.replace('fa-chevron-down', 'fa-chevron-right');
          } else {
            icon.classList.replace('fa-chevron-right', 'fa-chevron-down');
          }
        }
      });
    });

    // Toggle submenus
    submenuToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent propagation to parent items
        
        // Don't toggle if sidebar is collapsed - we use hover for that case
        if (sidebar.classList.contains('collapsed')) {
          return;
        }
        
        const submenuContent = e.currentTarget.closest('.submenu-container').querySelector('.submenu-content');
        submenuContent.classList.toggle('active');
        
        // Rotate icon
        const icon = e.currentTarget.querySelector('i');
        if (icon) {
          if (submenuContent.classList.contains('active')) {
            icon.classList.replace('fa-chevron-right', 'fa-chevron-down');
          } else {
            icon.classList.replace('fa-chevron-down', 'fa-chevron-right');
          }
        }
      });
    });

    // Also toggle submenu when clicking on the submenu header
    document.querySelectorAll('.submenu-header').forEach(header => {
      header.addEventListener('click', (e) => {
        // Don't toggle if sidebar is collapsed - we use hover for that case
        if (sidebar.classList.contains('collapsed')) {
          return;
        }
        
        // Only toggle if the target is not the toggle button itself (that's handled above)
        if (!e.target.closest('.toggle-submenu')) {
          const submenuContent = e.currentTarget.closest('.submenu-container').querySelector('.submenu-content');
          submenuContent.classList.toggle('active');
          
          // Rotate icon on the toggle button
          const icon = e.currentTarget.querySelector('.toggle-submenu i');
          if (icon) {
            if (submenuContent.classList.contains('active')) {
              icon.classList.replace('fa-chevron-right', 'fa-chevron-down');
            } else {
              icon.classList.replace('fa-chevron-down', 'fa-chevron-right');
            }
          }
        }
      });
    });

    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-toggle');
    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', () => {
        sidebar.classList.add('mobile-open');
        sidebar.classList.remove('collapsed'); // Ensure sidebar is expanded when opened on mobile
        sidebarOverlay.classList.add('active');
      });
    }

    // Close mobile menu when clicking overlay
    if (sidebarOverlay) {
      sidebarOverlay.addEventListener('click', () => {
        sidebar.classList.remove('mobile-open');
        sidebarOverlay.classList.remove('active');
      });
    }

    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth > 768) {
        if (sidebarOverlay) {
          sidebarOverlay.classList.remove('active');
        }
        sidebar.classList.remove('mobile-open');
      }
    });
  });

  // Añadir funcionalidad para actualizar la información del usuario
  document.addEventListener('DOMContentLoaded', () => {
    // Función para actualizar la información del usuario en el sidebar
    function updateUserInfo() {
      const userStr = localStorage.getItem('user');
      
      if (!userStr) {
        // No hay usuario autenticado
        return;
      }
      
      try {
        const user = JSON.parse(userStr);
        
        // Actualizar nombre y email en el sidebar
        const usernameElement = document.getElementById('sidebar-username');
        const emailElement = document.getElementById('sidebar-email');
        
        if (usernameElement && user.name) {
          usernameElement.textContent = user.name;
        }
        
        if (emailElement && user.email) {
          emailElement.textContent = user.email;
        }
        
        // También puedes mostrar/ocultar elementos basados en el estado de autenticación
        document.querySelectorAll('.authenticated-only').forEach(el => {
          el.style.display = 'block';
        });
        
        document.querySelectorAll('.guest-only').forEach(el => {
          el.style.display = 'none';
        });
      } catch (error) {
        console.error('Error parsing user data:', error);
      }
    }
    
    // Actualizar la información al cargar la página
    updateUserInfo();
    
    // Escuchar eventos de inicio de sesión para actualizar la información
    document.addEventListener('user-logged-in', (event) => {
      updateUserInfo();
    });
    
    // Opcionalmente: verificar con el backend si el usuario está realmente autenticado
    async function checkAuthStatus() {
      try {
        const response = await fetch('http://localhost:8000/api/user', {
          headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          },
          credentials: 'include'
        });
        
        if (response.ok) {
          const data = await response.json();
          localStorage.setItem('user', JSON.stringify(data.user));
          updateUserInfo();
        } else {
          // Si la petición falla, el usuario no está autenticado
          localStorage.removeItem('user');
          localStorage.removeItem('token');
        }
      } catch (error) {
        console.error('Error checking auth status:', error);
      }
    }
    
    // Verificar estado de autenticación al cargar la página
    checkAuthStatus();

    // Añadir al script del sidebar, en el bloque DOMContentLoaded
    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
      logoutButton.addEventListener('click', async (e) => {
        e.preventDefault();
        
        try {
          const token = localStorage.getItem('token');
          if (!token) return;
          
          // Llamar al endpoint de logout
          const response = await fetch('http://localhost:8000/api/logout', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Authorization': `Bearer ${token}`
            }
          });
          
          // Limpiar localStorage
          localStorage.removeItem('user');
          localStorage.removeItem('token');
          
          // Actualizar UI
          const usernameElement = document.getElementById('sidebar-username');
          const emailElement = document.getElementById('sidebar-email');
          
          if (usernameElement) usernameElement.textContent = 'Usuario';
          if (emailElement) emailElement.textContent = 'usuario@example.com';
          
          // Opcional: recargar página
          window.location.reload();
        } catch (error) {
          console.error('Error durante logout:', error);
        }
      });
    }
  });
</script>