---
// src/pages/games/[console]/[slug].astro
import MainLayout from '../../../layouts/MainLayout.astro';
import { getBackendImageUrl } from '../../../utils/image-utils';
import WishlistButton from '../../../components/ui/WishlistButton';
import ProductReviews from '../../../components/products/ProductReviews';
import "../../../styles/global.css";

// Obtener parámetros de la URL
const { console: consoleSlug, slug } = Astro.params;
console.log("Parámetros de URL:", { consoleSlug, slug });

// Variables para almacenar datos
interface GameData {
  game?: {
    id: string | number;
    name: string;
    image?: string;
    description?: string;
    price: number;
    sale_price?: number;
    stock: number;
    manufacturer?: string;
    release_year?: number;
    condition?: string;
    includes?: string;
  };
  relatedGames?: Array<{
    id: string | number;
    name: string;
    slug: string;
    image?: string;
    price: number;
    sale_price?: number;
    console?: {
      slug: string;
      name: string;
    };
  }>;
}

interface ConsoleData {
  id: string | number;
  name: string;
  slug: string;
  manufacturer?: string;
  image?: string;
}

let gameData: GameData | null = null;
let consoleData: ConsoleData | null = null;
let error: string | null = null;

const API_URL = 'http://backend:8000/api';

try {
  // Obtener datos del juego directamente
  const gameResponse = await fetch(`${API_URL}/games/${slug}`);
  
  if (gameResponse.ok) {
    gameData = await gameResponse.json();
    
    // Obtener datos de la consola
    const consoleResponse = await fetch(`${API_URL}/consoles/${consoleSlug}`);
    
    if (consoleResponse.ok) {
      consoleData = await consoleResponse.json();
    } else {
      error = `Error al cargar la consola: ${consoleResponse.status}`;
    }
  } else {
    error = `Error al cargar el juego: ${gameResponse.status}`;
  }
} catch (err: any) {
  error = `Error de conexión: ${err.message}`;
}

// Función para construir la URL de imagen correctamente
function getImageUrl(imagePath) {
  if (!imagePath) return '/assets/images/placeholder.png';
  
  // Si la ruta ya incluye /storage/, no la modifiques
  if (imagePath.startsWith('/storage/')) return imagePath;
  
  // Si la ruta empieza con 'games/', añade /storage/ al inicio
  if (imagePath.startsWith('games/')) return `/storage/${imagePath}`;
  
  // En cualquier otro caso, asume que es una ruta relativa a storage/games/
  return `/storage/games/${imagePath}`;
}

// Extraer datos del juego y juegos relacionados de forma segura
const game = gameData?.game || null;
const relatedGames = gameData?.relatedGames || [];
---

<MainLayout title={game ? `${game.name}` : "Detalle del juego"}>
  <div class="container mx-auto px-4 py-8">
    {error ? (
      <div class="bg-red-500 text-white p-4 rounded">
        <h2 class="text-xl font-bold mb-2">Error</h2>
        <p>{error}</p>
      </div>
    ) : game ? (
      <>
        <div class="mb-4">
          <a href={`/games/${consoleSlug}`} class="text-blue-400 hover:underline">
            &larr; Volver a {consoleData?.name || "juegos"}
          </a>
        </div>
        
        <h1 class="text-3xl font-bold mb-6">{game.name}</h1>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
          <div>
            <img 
              src={getBackendImageUrl(game.image)} 
              alt={game.name}
              class="w-full rounded" 
            />
          </div>
          
          <div>
            <p class="text-xl mb-4">{game.price} €</p>
            <p class="mb-6">{game.description || 'No hay descripción disponible.'}</p>
            
            <div class="flex gap-3 mb-4">
              <button 
                class="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded flex-1"
                id="add-to-cart-btn"
                data-id={game.id}
                data-name={game.name}
                data-price={game.sale_price || game.price}
              >
                Añadir al carrito
              </button>
              
              <!-- Botón de wishlist más grande con texto -->
              <div class="flex items-center">
                <WishlistButton 
                  gameId={game.id} 
                  size="lg" 
                  showText={true} 
                  client:load 
                />
              </div>

            </div>
          </div>
                        <!-- Después de la información del producto -->
              <ProductReviews gameId={game.id} client:visible />
        </div>
        
        {relatedGames.length > 0 && (
          <div>
            <h2 class="text-2xl font-bold mb-4">Juegos relacionados</h2>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              {relatedGames.map(relGame => (
                <div class="bg-gray-800 rounded overflow-hidden relative">
                  <!-- Botón de wishlist en juegos relacionados -->
                  <div class="absolute top-2 right-2 z-10">
                    <WishlistButton gameId={relGame.id} size="sm" client:load />
                  </div>
                  
                  <a href={`/games/${consoleSlug}/${relGame.slug}`}>
                    <img 
                      src={getBackendImageUrl(relGame.image)} 
                      alt={relGame.name}
                      class="w-full" 
                    />
                    <div class="p-2">
                      <h3 class="font-bold">{relGame.name}</h3>
                      <p>{relGame.price} €</p>
                    </div>
                  </a>
                </div>
              ))}
            </div>
          </div>
        )}
      </>
    ) : (
      <div class="text-center py-16">
        <p class="text-xl">Cargando información del juego...</p>
      </div>
    )}
  </div>
</MainLayout>

<!-- El script del carrito permanece igual -->
<script>
  // Script para manejar el botón "Añadir al carrito"
  document.addEventListener('DOMContentLoaded', () => {
    const addToCartButton = document.getElementById('add-to-cart-btn');
    if (addToCartButton) {
      addToCartButton.addEventListener('click', () => {
        const id = addToCartButton.getAttribute('data-id');
        const name = addToCartButton.getAttribute('data-name');
        const price = parseFloat(addToCartButton.getAttribute('data-price') || '0');
        
        const cart = JSON.parse(localStorage.getItem('cart') || '[]');
        const existingItemIndex = cart.findIndex(item => item.id === id);
        
        if (existingItemIndex >= 0) {
          cart[existingItemIndex].quantity += 1;
        } else {
          cart.push({
            id,
            name,
            price,
            quantity: 1
          });
        }
        
        localStorage.setItem('cart', JSON.stringify(cart));
        alert(`${name} ha sido añadido al carrito.`);
      });
    }
  });
</script>